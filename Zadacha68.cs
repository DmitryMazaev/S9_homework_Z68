/* Анализ алгоритма
Если m = 0, то A(0, n) = n + 1. Что следует из условия.
Если m = 1, то A(1, n) = A(0, A(1, n – 1)) = A(1, n – 1) + 1 = A(1, n – 2) + 2 = … = A(1, 0) + n = A(0, 1) + n = 2 + n.
Если m = 2, то A(2, n) = A(1, A(2, n – 1)) = A(2, n – 1) + 2 = A(2, n – 2) + 4 = … = A(2, 0) + 2n  = A(1, 1) + 2n  = 2 + 1 + 2n  =  2n + 3.
Если m = 3, то A(3, n) = A(2, A(3, n – 1)) = 2 * A(3, n – 1) + 3 = 2 * (2 * A(3, n – 2) + 3) + 3 = 4 * A(3, n – 2) + 3*2 + 3 = 8 * A(3, n – 3) + 3*4 + 3*2 + 3 = … = 2n * A(3, 0) + 3*2n–1 + … + 3*4 + 3*2 + 3 = 2n * A(2, 1) + 3*(2n – 1) = 2n * (2*1 + 3) + 3*2n – 3 = 2n+3 – 3.
Итак, имеем следующий набор формул:
A(0, n) = n + 1,
A(1, n) = n + 2,
A(2, n) = 2n + 3 (2 в степени n),
A(3, n) = 2n+3 – 3 (2 в степени n+3)*/
/* 
Задача 68: Напишите программу вычисления функции Аккермана с помощью рекурсии. Даны два неотрицательных числа m и n.
m = 2, n = 3 -> A(m,n) = 9
m = 3, n = 2 -> A(m,n) = 29 */

Console.Write("Введите положительное число m: ");
int m = int.Parse(Console.ReadLine()!);

Console.Write("Введите положительное число n: ");
int n = int.Parse(Console.ReadLine()!);


int AkFun (int m, int n)
{
    if (m == 0) 
    {
        return n + 1;
    }
    else if (m != 0 && n == 0) 
    {
        return AkFun(m - 1, 1);
    }
    else if (m > 0 && n > 0) 
    {
        return AkFun(m - 1, AkFun(m, n - 1));
    }
return AkFun(m, n);
}

Console.Write($"Функция Аккермана A({m},{n}) = ");
Console.WriteLine(AkFun(m, n));